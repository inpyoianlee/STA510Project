trControl = control,
data = mnist_27$train,
preProcess = c("center","scale"),
tuneGrid = expand.grid(scale = seq(0.01,2, length=5),
C = seq(0.01, 2, length=5),
degree = 2)
)
plot(train_svm_poly)
train_svm_poly
train_svm_poly
train_svm_poly$finalModel
plot(train_svm_poly)
train_svm_poly
mnist_27_train_res <- mnist_27$train %>%
addpredictions(train_svm_poly, var="poly_pred") %>%
mutate(poly_prob = predict(train_svm_poly, newdata = ., type = "prob")$seven)
mnist_27_train_res <- mnist_27$train %>%
add_predictions(train_svm_poly, var="poly_pred") %>%
mutate(poly_prob = predict(train_svm_poly, newdata = ., type = "prob")$seven)
mnist_27_test_res <- mnist_27$test %>%
add_predictions(train_svm_poly, var="poly_pred") %>%
mutate(poly_prob = predict(train_svm_poly, newdata = ., type = "prob")$seven)
View(mnist_27_train_res)
train_svm_poly <- train(y ~ x_1 + x_2, method = "svmPoly",
trControl = control,
data = mnist_27$train,
preProcess = c("center","scale"),
tuneGrid = expand.grid(scale = seq(0.01,2, length=5),
C = seq(0.01, 2, length=5),
degree = 2)
)
mnist_27_train_res <- mnist_27$train %>%
add_predictions(train_svm_poly, var="poly_pred") %>%
mutate(poly_prob = predict(train_svm_poly, newdata = ., type = "prob")$seven)
mnist_27_test_res <- mnist_27$test %>%
add_predictions(train_svm_poly, var="poly_pred") %>%
mutate(poly_prob = predict(train_svm_poly, newdata = ., type = "prob")$seven)
View(mnist_27_train_res)
p1 <- mnist_27$train %>%
ggplot() +
geom_tile(data = mnist_27_train_res,
aes(x = x_1, y = x_2, fill = poly_prob)) +
geom_point(aes(x_1, x_2, color = y)) + # plot actual data
scale_fill_gradient2(low="#dd7e7e", mid="black", high="#338cea",
midpoint=cutoff, limits=range(mnist_27_train_res$poly_prob))
p2 <- mnist_27$test %>%
ggplot() +
geom_tile(data = mnist_27_test_res,
aes(x = x_1, y = x_2, fill = poly_prob)) +
geom_point(aes(x_1, x_2, color = y)) + # plot actual data
scale_fill_gradient2(low="#dd7e7e", mid="black", high="#338cea",
midpoint=cutoff, limits=range(mnist_27_train_res$poly_prob))
grid.arrange(p1, p2, ncol = 2)
train_svm_poly <- train(y ~ x_1 + x_2, method = "svmPoly",
trControl = control,
data = mnist_27$train,
preProcess = c("center","scale"),
tuneGrid = expand.grid(scale = seq(0.01,2, length=5),
C = seq(0.01, 2, length=5),
degree = 3)
)
mnist_27_train_res <- mnist_27$train %>%
add_predictions(train_svm_poly, var="poly_pred") %>%
mutate(poly_prob = predict(train_svm_poly, newdata = ., type = "prob")$seven)
mnist_27_test_res <- mnist_27$test %>%
add_predictions(train_svm_poly, var="poly_pred") %>%
mutate(poly_prob = predict(train_svm_poly, newdata = ., type = "prob")$seven)
p1 <- mnist_27$train %>%
ggplot() +
geom_tile(data = mnist_27_train_res,
aes(x = x_1, y = x_2, fill = poly_prob)) +
geom_point(aes(x_1, x_2, color = y)) + # plot actual data
scale_fill_gradient2(low="#dd7e7e", mid="black", high="#338cea",
midpoint=cutoff, limits=range(mnist_27_train_res$poly_prob))
p2 <- mnist_27$test %>%
ggplot() +
geom_tile(data = mnist_27_test_res,
aes(x = x_1, y = x_2, fill = poly_prob)) +
geom_point(aes(x_1, x_2, color = y)) + # plot actual data
scale_fill_gradient2(low="#dd7e7e", mid="black", high="#338cea",
midpoint=cutoff, limits=range(mnist_27_train_res$poly_prob))
grid.arrange(p1, p2, ncol = 2)
library(Lock5Data)
SleepStudy$Stress <- factor(SleepStudy$Stress, levels = c("normal","high"))
ggplot(SleepStudy, aes(x = PoorSleepQuality, y = GPA, color = Stress)) +
geom_point()
train_index <- createDataPartition(SleepStudy$GPA, p = 0.7, times = 1)
SleepStudyTrain <- SleepStudy[train_index,]
train_index <- createDataPartition(SleepStudy$GPA, p = 0.7, times = 1)$Resample1
SleepStudyTrain <- SleepStudy[train_index,]
SleepStudyTest <- SleepStudy[-train_index,]
ggplot(SleepStudyTrain, aes(x = PoorSleepQuality, y = GPA, color = Stress)) +
geom_point()
sleepStudy_logModel <- train(Stress ~ PoorSleepQuality + GPA,
method = "glm",
data = SleepStudyTrain)
sleepStudy_logModel$finalModel
?SleepStudy
SleepStudyTest %>%
ggplot(aes(PoorSleepQuality, GPA, color = Stress)) +
geom_point()
poorSleepGrid <- seq(0, 20, length = 100)
GPAGrid <- seq(0, 5, length = 100)
grid <- expand.grid(PoorSleepQuality = poorSleepGrid, GPA = GPAGrid)
grid <- grid %>%
add_predictions(sleepStudy_logModel, var = "glm")
View(grid)
grid <- grid %>%
add_predictions(sleepStudy_logModel, var = "glm_pred")
View(grid)
Remove(grid)
remove(grid)
grid <- expand.grid(PoorSleepQuality = poorSleepGrid, GPA = GPAGrid)
grid <- grid %>%
add_predictions(sleepStudy_logModel, var = "glm_pred")
View(grid)
grid <- grid %>%
add_predictions(sleepStudy_logModel, var = "glm_pred") %>%
mutate(glm_pred = predict(sleepStudy_logModel, newdata = ., type="prob")$seven)
cutoff <- 0.5
grid <- grid %>%
mutate(glm_two = glm_pred > cutoff)
remove(grid)
SleepStudyTest %>%
ggplot(aes(PoorSleepQuality, GPA, color = Stress)) +
geom_point()
poorSleepGrid <- seq(0, 20, length = 100)
GPAGrid <- seq(0, 5, length = 100)
grid <- expand.grid(PoorSleepQuality = poorSleepGrid, GPA = GPAGrid)
grid <- grid %>%
add_predictions(sleepStudy_logModel, var = "glm_pred") %>%
mutate(glm_pred = predict(sleepStudy_logModel, newdata = ., type="prob")$seven)
cutoff <- 0.5
grid <- grid %>%
mutate(glm_two = glm_pred > cutoff)
View(grid)
grid <- expand.grid(PoorSleepQuality = poorSleepGrid, GPA = GPAGrid)
grid <- grid %>%
add_predictions(sleepStudy_logModel, var = "glm_pred") %>%
mutate(glm_pred = predict(sleepStudy_logModel, newdata = ., type="prob")$seven)
View(grid)
grid <- grid %>%
add_predictions(sleepStudy_logModel, var = "glm_pred") %>%
mutate(glm_pred = predict(sleepStudy_logModel, newdata = ., type="prob")$high)
View(grid)
grid <- grid %>%
mutate(glm_two = glm_pred > cutoff)
View(grid)
SleepStudyTrain %>%
ggplot() +
geom_raster(data = grid, aes(x = PoorSleepQuality, y = GPA, fill = glm_pred), interpolate = TRUE) +
geom_point(aes(PoorSleepQuality, GPA, color = y)) + # plot actual data
scale_fill_gradient2(low="#dd7e7e", mid="black", high="#338cea",
midpoint=cutoff, limits=range(grid$glm_pred))
SleepStudyTrain %>%
ggplot() +
geom_raster(data = grid, aes(x = PoorSleepQuality, y = GPA, fill = glm_pred), interpolate = TRUE)
SleepStudyTrain %>%
ggplot() +
geom_raster(data = grid, aes(x = PoorSleepQuality, y = GPA, fill = glm_pred), interpolate = TRUE) +
geom_point(aes(PoorSleepQuality, GPA, color = Stress))
SleepStudyTrain %>%
ggplot() +
geom_raster(data = grid, aes(x = PoorSleepQuality, y = GPA, fill = glm_pred), interpolate = TRUE) +
geom_point(aes(PoorSleepQuality, GPA, color = Stress)) +
scale_fill_gradient2(low="#dd7e7e", mid = "black", high="#338cea",
midpoint=cutoff, limits=range(grid$glm_pred))
SleepStudyTest %>%
ggplot() +
geom_raster(data = grid, aes(x = PoorSleepQuality, y = GPA, fill = glm_pred), interpolate = TRUE) +
geom_point(aes(PoorSleepQuality, GPA, color = Stress)) +
scale_fill_gradient2(low="#dd7e7e", mid = "black", high="#338cea",
midpoint=cutoff, limits=range(grid$glm_pred))
sleep_log <- train(Stress ~ Gender+ClassYear+LarkOwl+EarlyClass+GPA+ClassesMissed+CognitionZscore+
PoorSleepQuality+Happiness+Drinks+WeekendSleep,
method = "glm",
data = SleepStudyTrain)
remove(grid)
sleepStudy_logModel <- train(Stress ~ Gender+ClassYear+LarkOwl+EarlyClass+GPA+ClassesMissed+CognitionZscore+
PoorSleepQuality+Happiness+Drinks+WeekendSleep,
method = "glm",
data = SleepStudyTrain)
remove(grid)
grid <- expand.grid(PoorSleepQuality = poorSleepGrid, GPA = GPAGrid)
grid <- grid %>%
add_predictions(sleepStudy_logModel, var = "glm_pred") %>%
mutate(glm_pred = predict(sleepStudy_logModel, newdata = ., type="prob")$high)
grid <- grid %>%
add_predictions(sleepStudy_logModel, var = "glm_pred") %>%
mutate(glm_pred = predict(sleepStudy_logModel, newdata = ., type="prob")$high)
grid <- grid %>%
add_predictions(sleepStudy_logModel, var = "glm_pred") %>%
mutate(glm_pred = predict(sleepStudy_logModel, newdata = ., type="prob")$high)
View(grid)
sleepStudy_logModel <- train(Stress ~ Gender+ClassYear+LarkOwl+EarlyClass+GPA+ClassesMissed+CognitionZscore+
PoorSleepQuality+Happiness+Drinks+WeekendSleep,
method = "glm",
data = SleepStudyTrain)
remove(grid)
grid <- expand.grid(PoorSleepQuality = poorSleepGrid, GPA = GPAGrid)
grid <- grid %>%
add_predictions(sleepStudy_logModel, var = "glm_pred") %>%
mutate(glm_pred = predict(sleepStudy_logModel, newdata = ., type="prob")$high)
sleepStudy_logModel <- train(Stress ~ Gender+ClassYear+LarkOwl+EarlyClass+GPA+ClassesMissed+CognitionZscore+
PoorSleepQuality+Happiness+Drinks+WeekendSleep,
method = "glm",
data = SleepStudyTrain)
install.packages("tidyverse")
library(ggplot2)
data("diamonds")
View(diamonds)
head(diamonds)
str(diamonds)
colnames(diamonds)
library(tidyverse)
features <- head(colnames(housing), -1)
housing <- read.csv('housing_hw.csv')
head(housing)
features <- head(colnames(housing), -1)
model_summaries <- list()
models <- list()
i = 1
for (feature in features) {
model_summaries[[i]] <- paste(feature, "vs MEDV", sep=" ")
models[[i]] <- paste(feature, "vs MEDV", sep=" ")
i = i+1
model_summaries[[i]] <- summary( lm(MEDV ~ housing[feature][,1], data=housing) )
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
i = i + 1
}
model_summaries
models
library(tidyverse)
features <- head(colnames(housing), -1)
model_summaries <- list()
models <- list()
i = 1
for (feature in features) {
model_summaries[[i]] <- paste(feature, "vs MEDV", sep=" ")
models[[i]] <- paste(feature, "vs MEDV", sep=" ")
i = i+1
model_summaries[[i]] <- summary( lm(MEDV ~ housing[feature][,1], data=housing) )
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
i = i + 1
}
model_summaries
print("___________________________________________")
models
View(model_summaries)
model_summaries[1]
model_summaries[2]
features <- head(colnames(housing), -1)
model_summaries <- list()
models <- list()
i = 1
for (feature in features) {
model_summaries[[i]] <- paste(feature, "vs MEDV", sep=" ")
models[[i]] <- paste(feature, "vs MEDV", sep=" ")
i = i+1
model_summaries[[i]] <- summary( lm(MEDV ~ housing[feature][,1], data=housing) )
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
i = i + 1
}
models
confint(lm(MEDV ~ TAX, data=housing))
confint(lm(MEDV ~ TAX, data=housing), level=0.99)
models <- list()
i = 0
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
i = i + 1
}
models <- list()
i = 1
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
i = i + 1
}
models
View(models)
features = colnames(housing, -1)
models <- list()
features = colnames(housing, -1)
i = 1
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
i = i + 1
}
models
modelConfInts <- list()
i = 1
for (model in models) {
modelConfInts[[i]] <- confint(model, level=0.99)
}
modelConfInts
modelConfInts <- list()
i = 1
for (model in models) {
modelConfInts[[i]] <- confint(model, level=0.99)
i = i + 1
}
modelConfInts
features = head(colnames(housing), -1)
modelConfInts <- list()
i = 1
for (model in models) {
modelConfInts[[i]] <- confint(model, level=0.99)
i = i + 1
}
modelConfInts
models <- list()
features = head(colnames(housing), -1)
i = 1
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
i = i + 1
}
models
modelConfInts <- list()
i = 1
for (model in models) {
modelConfInts[[i]] <- confint(model, level=0.99)
i = i + 1
}
modelConfInts
models <- list()
models_summaries <- list()
features = head(colnames(housing), -1)
i = 1
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
model_summaries <- summary(models[[i]])
i = i + 1
}
models
models <- list()
models_summaries <- list()
features = head(colnames(housing), -1)
i = 1
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
model_summaries <- summary(models[[i]])
i = i + 1
}
models <- list()
models_summaries <- list()
features = head(colnames(housing), -1)
i = 1
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
model_summaries <- summary(models[[i]])
i = i + 1
}
models
models <- list()
models_summaries <- list()
features = head(colnames(housing), -1)
i = 1
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
model_summaries <- summary(models[[i]])
i = i + 1
}
models_summaries
models <- list()
models_summaries <- list()
features = head(colnames(housing), -1)
i = 1
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
model_summaries[[i]] <- summary(models[[i]])
i = i + 1
}
models_summaries
View(model_summaries)
models <- list()
models_summaries <- list()
features = head(colnames(housing), -1)
i = 1
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
model_summaries[[i]] <- summary(models[[i]])
i = i + 1
}
models_summaries
models <- list()
models_summaries <- list()
features = head(colnames(housing), -1)
i = 1
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
model_summaries[[i]] <- summary(lm(MEDV ~ housing[feature][,1], data=housing))
i = i + 1
}
models_summaries
features
type(features)
?type
typeof(features)
typeof(models)
models[[1]]
summary(models[[1]])
models <- list()
models_summaries <- list()
features = head(colnames(housing), -1)
i = 1
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
model_summaries[[i]] <- summary( models[[i]] )
i = i + 1
}
models_summaries
models_summaries[[1]] <- models[[i]]
models_summaries[[1]] <- models[[1]]
models_summaries[[1]] <- summary(models[[1]])
models_summaries
View(models)
models <- list()
models_summaries <- list()
features = head(colnames(housing), -1)
i = 1
for (feature in features) {
models[[i]] <- lm(MEDV ~ housing[feature][,1], data=housing)
models_summaries[[i]] <- summary( models[[i]] )
i = i + 1
}
models_summaries
for (feature in features) {}
for (feature in features) { print(feature) }
for (feature in features) { print(feature[,1]) }
housing['CRIM']
features(1)
features[1]
r_values <- list()
i <- 1
for (ms in models_summaries) {
r_values[i] <- ms$r
}
r_values
r_values <- list()
i <- 1
for (ms in models_summaries) {
r_values[[i]] <- ms$r
}
r_values
models_summaries[[1]]$r.squared
r_values <- list()
i <- 1
for (ms in models_summaries) {
r_values[[i]] <- ms$r.squared
}
r_values
r_values <- list()
i <- 1
for (ms in models_summaries) {
r_values[[i]] <- ms$r.squared
i <- i+1
}
r_values
r_values <- list()
i <- 1
for (ms in models_summaries) {
r_values[i] <- ms$r.squared
i <- i+1
}
r_values
features[13]
features
housing["AGE"][,1]
housing["AGE"][1,1]
housing["AGE"][1,]
housing["AGE"]
modelConfInts <- list()
i = 1
for (model in models) {
modelConfInts[[i]] <- confint(model, level=0.99)
i = i + 1
}
modelConfInts
r_values <- list()
i <- 1
for (ms in models_summaries) {
r_values[i] <- ms$r.squared
i <- i+1
}
r_values
features[13]
head(housing)
features[13]
features[4]
print("Hello World")
library(tidyverse)
library(rstatix)
install.packages("rstatix")
install.packages("rstatix")
?dlog
0.01:0.01:10
library(glmnet)
library(tidyverse)
library(tidymodels)
0.01:0.01:10
0.01:10:0.01
0.01:0.01:10
summary(df)
library(tidyverse)
library(tidyr)
df <- read_csv('M1_final.csv')
setwd("/Users/ianlee/Documents/STA510HW/Project")
df <- read_csv('M1_final.csv')
df$`Dew Point` <- as.numeric(df$`Dew Point`)
type(df$`Dew Point`)
summary(df)
